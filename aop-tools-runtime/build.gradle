import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'
//apply plugin: 'maven'//本地使用

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile 'org.aspectj:aspectjrt:1.8.13'
    compile rootProject.ext.groupId + ':annotation:' + rootProject.ext.publishVersion
}

android.libraryVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompile
    javaCompile.doLast {
        String[] args = [
                "-showWeaveInfo",
                "-1.5",
                "-inpath", javaCompile.destinationDir.toString(),
                "-aspectpath", javaCompile.classpath.asPath,
                "-d", javaCompile.destinationDir.toString(),
                "-classpath", javaCompile.classpath.asPath,
                "-bootclasspath", android.bootClasspath.join(File.pathSeparator)
        ]

        MessageHandler handler = new MessageHandler(true)
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break
            }
        }
    }
}


//////////////////////////////本地//////////////////////////////
/*uploadArchives{
    repositories.mavenDeployer {
        repository(url:rootProject.ext.repositoryUrl){
            authentication(userName: 'admin', password: 'admin123')
        }
        pom.groupId = rootProject.ext.groupId
        pom.artifactId = "aop-tools-runtime"
        pom.version = rootProject.ext.publishVersion
    }
}*/
//////////////////////////////本地//////////////////////////////


publish {
    artifactId = 'aop-tools-runtime'
    userOrg = rootProject.ext.userOrg
    groupId = rootProject.ext.groupId
    uploadName = rootProject.ext.uploadName
    publishVersion = rootProject.ext.publishVersion
    desc = rootProject.ext.description
    website = rootProject.ext.website
    licences = rootProject.ext.licences
}
