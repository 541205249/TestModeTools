1、元注解
元注解是指注解的注解。包括  @Retention @Target @Document @Inherited四种。

1.1、@Retention:
Retention 的英文意为保留期的意思。当 @Retention 应用到一个注解上的时候，它解释说明了这个注解的的存活时间。
- RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。
- RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。
- RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。

1.2、@Documented：
顾名思义，这个元注解肯定是和文档有关。它的作用是能够将注解中的元素包含到 Javadoc 中去。

1.3、@Target({ElementType.FIELD,ElementType.METHOD})
Target 是目标的意思，@Target 指定了注解运用的地方
@Target 有下面的取值
    ElementType.ANNOTATION_TYPE 可以给一个注解进行注解
    ElementType.CONSTRUCTOR 可以给构造方法进行注解
    ElementType.FIELD 可以给属性进行注解
    ElementType.LOCAL_VARIABLE 可以给局部变量进行注解
    ElementType.METHOD 可以给方法进行注解
    ElementType.PACKAGE 可以给一个包进行注解
    ElementType.PARAMETER 可以给一个方法内的参数进行注解
    ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举

1.4、@Inherited
Inherited 是继承的意思，表示被該註解修飾的類Ａ，當有子類Ｂ繼承Ａ，則Ｂ也被該註解修飾

1.5、@Repeatable
Repeatable 是可重复的意思。@Repeatable 是 Java 1.8 才加进来的，所以算是一个新的特性
如：
@interface Persons {
    Person[]  value();
}
@Repeatable(Persons.class)
@interface Person{
    String role default "";
}
@Person(role="artist")
@Person(role="coder")
@Person(role="PM")
public class SuperMan{
}

2.注解的属性
注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，
其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。

@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface TestAnnotation {
    int id();
    String msg();
    String msg() default "Hi";  //此处为添加了默认值的属性
}

赋值的方式是在注解的括号内以 value=”” 形式，多个属性之前用 ，隔开。
@TestAnnotation(id=3,msg="hello annotation")
public class Test {
}

//添加默认值的方式
public @interface TestAnnotation {
    int id() default -1;
    String msg() default "Hi";  //此处为添加了默认值的属性
}

//使用时有默认值则可不用填参数
@TestAnnotation()
public class Test {}

3.注解与反射
3.1：首先可以通过 Class 对象的 isAnnotationPresent() 方法判断它是否应用了某个注解
  public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {}

3.2：然后通过 getAnnotation() 方法来获取 Annotation 对象。
   public <A extends Annotation> A getAnnotation(Class<A> annotationClass) {}
  或者是 getAnnotations() 方法：
  public Annotation[] getAnnotations() {}

  前一种方法返回指定类型的注解，后一种方法返回注解到这个元素上的所有注解。

  如果获取到的 Annotation 如果不为 null，则就可以调用它们的属性方法了。比如
  @TestAnnotation()
  public class Test {
      public static void main(String[] args) {
          boolean hasAnnotation = Test.class.isAnnotationPresent(TestAnnotation.class);
          if ( hasAnnotation ) {
              TestAnnotation testAnnotation = Test.class.getAnnotation(TestAnnotation.class);
              System.out.println("id:"+testAnnotation.id());
              System.out.println("msg:"+testAnnotation.msg());
          }
      }
  }